{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field--entity-reference-revisions.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_yourfieldname field
 * on an article node type:
 * - field--node--field-paragraphs--article.html.twig
 * - field--node--field-paragraphs.html.twig
 * - field--node--article.html.twig
 * - field--field-yourfieldname.html.twig
 * - field--entity-reference-revisions.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 * - container_attributes: The attributes for the grid container.
 * - row_attributes: The attributes for a grid row.
 *
 *
 * @see template_preprocess_field()
 */
#}
{%
  set classes = [
    'field',
    'field--name-' ~ field_name|clean_class,
    'field--type-' ~ field_type|clean_class,
    'field--label-' ~ label_display,
  ]
%}
{%
  set title_classes = [
    'field__label',
    label_display == 'visually_hidden' ? 'visually-hidden',
  ]
%}

<div{{ attributes.addClass(classes) }}>
{% if not label_hidden %}
  <div{{ title_attributes.addClass(title_classes) }}>{{ label }}</div>
{% endif %}

{% if container_attributes is not empty %}
  <div{{ container_attributes }}>
{% endif %}

  <div{{ row_attributes.addClass('field__items') }}>
    {% for item in items %}
      <div{{ item.attributes.addClass('field__item') }}>{{ item.content }}</div>
    {% endfor %}
  </div>

{% if container_attributes is not empty %}
  </div>
{% endif %}
</div>
