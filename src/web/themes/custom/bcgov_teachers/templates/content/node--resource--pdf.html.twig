{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}

{{ attach_library('classy/node') }}

<a href="https://www.workbc.ca/" title="WorkBC" rel="home" class="site-logo" target="_blank">
  <img src="/themes/custom/bcgov_teachers/assets/logo-workbc.png" alt="WorkBC" width="220" height="40">
  <font size="15">Career Education Resources</font>
</a>

<article{{ attributes.addClass(classes) }}>

<br /><br />

  <font size="20"><b>{{ "Lesson Plan: "|t }}</b> {{ node.title.value }}</font>
  {% if node.field_term_resource_stage.value is not empty %}
    {{ "Career Lifecycle Stage: "|t }} {{ content.field_term_resource_stage }}
  {% endif %}
  {% if node.field_resource_card_summary.getValue().0.value is not empty %}
    {{ node.field_resource_card_summary.getValue().0.value|raw }}
  {% endif %}
  {% if node.field_term_resource_grade.value is not empty %}
    {{ content.field_term_resource_grade }}
  {% endif %}
  {% if node.field_resource_time.value is not empty %}
    {{ node.field_resource_time.value }}
  {% endif %}
  <br /><br />
  
  {# Main Container #}
  {% for key,subentity in node.field_add_resource_description if key|first != '#' %}
    {% if subentity.entity.field_main_heading.value is not empty %}
      <font size="15"><b><u>{{ subentity.entity.field_main_heading.value }}</u></b></font><br />
    {% endif %}
    {% for lkey,lsubentity in subentity.entity.field_simple_descriotion if key|first != '#' %}
      {% if lsubentity.entity.field_para_simple_title.value is not empty %}
        <font size="15">{{ lsubentity.entity.field_para_simple_title.value|raw }}</font>
      {% endif %}
      {% if lsubentity.entity.field_para_simple_body.getValue().0.value is not empty %}
        {{ lsubentity.entity.field_para_simple_body.getValue().0.value|raw }}
      {% endif %}
    {% endfor %}
    {% set next_key = key + 1 %}
  {% endfor %}
</article>

{% macro bytesToSize(bytes) %}
  {% spaceless %}
    {% set kilobyte = 1024 %}
    {% set megabyte = kilobyte * 1024 %}
    {% set gigabyte = megabyte * 1024 %}
    {% set terabyte = gigabyte * 1024 %}

    {% if bytes < kilobyte %}
      {{ bytes ~ ' B' }}
    {% elseif bytes < megabyte %}
      {{ (bytes / kilobyte)|number_format(2, '.') ~ ' KB' }}
    {% elseif bytes < gigabyte %}
      {{ (bytes / megabyte)|number_format(2, '.') ~ ' MB' }}
    {% elseif bytes < terabyte %}
      {{ (bytes / gigabyte)|number_format(2, '.') ~ ' GB' }}
    {% else %}
      {{ (bytes / terabyte)|number_format(2, '.') ~ ' TB' }}
    {% endif %}
  {% endspaceless %}
{% endmacro %}
